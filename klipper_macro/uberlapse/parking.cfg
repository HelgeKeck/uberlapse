# -------------------------------------										
# Park Print Head
# -------------------------------------										
[gcode_macro _UL_PARK_START]
variable_last_x: 0                      ; only for internal use
variable_last_y: 0                      ; only for internal use
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}
    {% set session = printer['gcode_macro _UL_SESSION'] %}

    SET_GCODE_VARIABLE MACRO=_UL_PARKING VARIABLE=absolute_coordinates VALUE={printer.gcode_move.absolute_coordinates}
    SET_GCODE_VARIABLE MACRO=_UL_RETRACTION VARIABLE=absolute_extrude VALUE={printer.gcode_move.absolute_extrude}
    {% if parking.enabled %}
        G90
        {% if "xyz" not in printer.toolhead.homed_axes %}
            {action_respond_info("Axis not homed!")}
        {% else %}
            SET_GCODE_VARIABLE MACRO=_UL_PARK_START VARIABLE=last_x VALUE={printer.toolhead.position.x|float}
            SET_GCODE_VARIABLE MACRO=_UL_PARK_START VARIABLE=last_y VALUE={printer.toolhead.position.y|float}
            _UL_PARK_PRINT_HEAD
        {% endif %}
        M400
    {% endif %}


[gcode_macro _UL_PARK_END]
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}
    {% set park_start = printer['gcode_macro _UL_PARK_START'] %}

    {% if parking.enabled %}
        G0 X{park_start.last_x|float} Y{park_start.last_y|float} F{parking.travel_speed|int * 60}
        {% if parking.absolute_coordinates == False %} 
            G91
        {% endif %}
    {% endif %}


[gcode_macro _UL_PARK_PRINT_HEAD]
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    _UL_LIFT_PRINT_HEAD
    {% if parking.animation_mode == '_UL_STATIC_BEHIND_OBJECT' %}
        _UL_STATIC_BEHIND_OBJECT
    {% endif %}

    {% if parking.animation_mode == '_UL_HORIZONTAL_MOVEMENT' %}
        _UL_HORIZONTAL_MOVEMENT
    {% endif %}

    {% if parking.animation_mode == '_UL_FOLLOW_PRINT_AREA_BOUNDARIES' %}
        _UL_FOLLOW_PRINT_AREA_BOUNDARIES
    {% endif %}


[gcode_macro _UL_INIT_PRINT_HEAD]
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    {% if parking.animation_mode == '_UL_HORIZONTAL_MOVEMENT' %}
        _UL_INIT_HORIZONTAL_MOVEMENT
    {% endif %}

    {% if parking.animation_mode == '_UL_FOLLOW_PRINT_AREA_BOUNDARIES' %}
        _UL_INIT_FOLLOW_PRINT_AREA_BOUNDARIES
    {% endif %}


# -------------------------------------										
# Static Behind Object
# -------------------------------------										
[gcode_macro _UL_STATIC_BEHIND_OBJECT]
gcode:
    {% set session = printer['gcode_macro _UL_SESSION'] %}
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    {% set x_current = session.print_max_x|float - (session.print_max_x|float - session.print_min_x|float) / 2 %}
    {% set y_current = session.print_max_y|float %}

    {% if (y_current + parking.y_offset) <= printer.toolhead.axis_maximum.y %}
        {% set y_current = y_current + parking.y_offset %}
    {% endif %}

    G0 X{x_current} Y{y_current} F{parking.travel_speed|int * 60}


# -------------------------------------										
# Horizontal Movement
# -------------------------------------										
[gcode_macro _UL_HORIZONTAL_MOVEMENT]
variable_x_step: 0
variable_x_steps: 15
variable_direction: 0
gcode:
    {% set self = printer['gcode_macro _UL_HORIZONTAL_MOVEMENT'] %}
    {% set session = printer['gcode_macro _UL_SESSION'] %}
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    {% set MAX_X = (session.print_max_x - session.print_min_x)|float %}
    {% set STEP_X = (MAX_X / self.x_steps)|float %}

    {% if self.direction == 0 %}
        # left -> right
        {% set x_current = (session.print_min_x + STEP_X * self.x_step)|float %}
        SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE={self.x_step + 1}
        {% if self.x_step >= self.x_steps %}
            SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE=0
            SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=direction VALUE=1
        {% endif %}
    {% else %}
        {% if self.direction == 1 %}
            # right -> left
            {% set x_current = (session.print_max_x - STEP_X * self.x_step)|float %}
            SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE={self.x_step + 1}
            {% if self.x_step >= self.x_steps %}
                SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE=0
                SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=direction VALUE=0
            {% endif %}
        {% endif %}
    {% endif %}

    {% set y_current = session.print_max_y|float - (session.print_max_y|float - session.print_min_y|float) / 2 %}
    {% if (y_current + parking.y_offset) <= printer.toolhead.axis_maximum.y %}
        {% set y_current = y_current + parking.y_offset %}
    {% endif %}

    G0 X{x_current} Y{y_current} F{parking.travel_speed|int * 60}
    
    
[gcode_macro _UL_INIT_HORIZONTAL_MOVEMENT]
gcode:
    SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE=0
    SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=direction VALUE=0


# -------------------------------------										
# Follow Print Area Boundaries
# -------------------------------------										
[gcode_macro _UL_FOLLOW_PRINT_AREA_BOUNDARIES]
variable_sync_slider: False
variable_x_step: 0
variable_x_steps: 15
variable_y_step: 0
variable_y_steps: 15
variable_direction: 0
gcode:
    {% set self = printer['gcode_macro _UL_FOLLOW_PRINT_AREA_BOUNDARIES'] %}
    {% set session = printer['gcode_macro _UL_SESSION'] %}
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    {% set MAX_X = (session.print_max_x - session.print_min_x)|float %}
    {% set STEP_X = (MAX_X / self.x_steps)|float %}
    {% set MAX_Y = (session.print_max_y - session.print_min_y)|float %}
    {% set STEP_Y = (MAX_Y / self.x_steps)|float %}

    {% if self.direction == 0 %}
        # left -> right
        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE={self.x_step + 1}
        {% set x_current = (session.print_min_x + STEP_X * self.x_step)|float %}
        {% set y_current = session.print_max_y %}
        {% if self.x_step >= self.x_steps %}
            SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE=0
            SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=1
        {% endif %}
    {% else %}
        {% if self.direction == 1 %}
            # back -> front
            SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE={self.y_step + 1}
            {% set x_current = session.print_max_x %}
            {% set y_current = (session.print_max_y - STEP_Y * self.y_step)|float %}
            {% if self.y_step >= self.y_steps %}
                SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE=0
                SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=2
            {% endif %}
        {% else %}
            {% if self.direction == 2 %}
                # right -> left
                SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE={self.x_step + 1}
                {% set x_current = (session.print_max_x - STEP_X * self.x_step)|float %}
                {% set y_current = session.print_min_y %}
                {% if self.x_step >= self.x_steps %}
                    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE=0
                    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=3
                {% endif %}
            {% else %}
                {% if self.direction == 3 %}
                    # front -> back
                    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE={self.y_step + 1}
                    {% set x_current = session.print_min_x %}
                    {% set y_current = (session.print_min_y + STEP_Y * self.y_step)|float %}
                    {% if self.y_step >= self.y_steps %}
                        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE=0
                        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=0
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}

    {% if self.sync_slider == True %}
        {% if printer['gcode_macro START_UBERLAPSE'].has_camera_slider == True %}
            _UL_SLIDER_MOVE MOVE={x_current}
        {% endif %}
    {% endif %}

    G0 X{x_current} Y{y_current} F{parking.travel_speed|int * 60}


[gcode_macro _UL_INIT_FOLLOW_PRINT_AREA_BOUNDARIES]
gcode:
    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE=0
    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE=0
    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=0


# -------------------------------------										
# Lift Print Head
# -------------------------------------										
[gcode_macro _UL_LIFT_PRINT_HEAD]
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    {% set max_z = printer.toolhead.axis_maximum.z %}
    {% set park_z = parking.lift_distance %}
    {% set act_z = printer.toolhead.position.z %}
    {% if (act_z|float + park_z|float) < max_z|float %}
        {% set park_z = (act_z|float + park_z|float) %}
    {% else %}
        {% set park_z = max_z %}
    {% endif %}

    G0 Z{park_z} F{parking.lift_speed|int * 60}
