# -------------------------------------										
# Parking Settings
# -------------------------------------										
[gcode_macro _UL_PARKING]
variable_mode: 0
variable_lift_speed: 20
variable_travel_speed: 500
variable_parking_time: 5.0
gcode: 


# -------------------------------------										
# Park Print Head
# -------------------------------------										
[gcode_macro _UL_PARK_START]
variable_last_x: 0                      ; only for internal use
variable_last_y: 0                      ; only for internal use
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}
    {% set session = printer['gcode_macro _UL_SESSION'] %}

    {% if parking.mode > 0 %}
        G90
        {% if "xyz" not in printer.toolhead.homed_axes %}
            {action_respond_info("Axis not homed!")}
        {% else %}
            SET_GCODE_VARIABLE MACRO=_UL_PARK_START VARIABLE=last_x VALUE={printer.toolhead.position.x|float}
            SET_GCODE_VARIABLE MACRO=_UL_PARK_START VARIABLE=last_y VALUE={printer.toolhead.position.y|float}
            _UL_PARK_PRINT_HEAD
        {% endif %}
        M400
    {% endif %}


[gcode_macro _UL_PARK_END]
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}
    {% set park_start = printer['gcode_macro _UL_PARK_START'] %}

    {% if parking.mode > 0 %}
        G0 X{park_start.last_x|float} Y{park_start.last_y|float} F{parking.travel_speed|int * 60}
        {% if printer.gcode_move.absolute_coordinates == False %} 
            G91
        {% endif %}
    {% endif %}


[gcode_macro _UL_PARK_PRINT_HEAD]
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}
    {% set uberlapse = printer['gcode_macro UBERLAPSE'] %}

    {% if uberlapse.test == False %}
        _UL_LIFT_PRINT_HEAD
    {% endif %}  

    {% if parking.mode == 1 %}
        _UL_STATIC
    {% endif %}

    {% if parking.mode == 2 %}
        _UL_HORIZONTAL_MOVEMENT
    {% endif %}

    {% if parking.mode == 3 %}
        _UL_FOLLOW_PRINT_AREA_BOUNDARIES
    {% endif %}


# -------------------------------------										
# Static Position
# -------------------------------------										
[gcode_macro _UL_STATIC]
variable_config: {
    'base': 'print-area',
    'x': {'position': 'center', 'offset': 0}, 
    'y': {'position': 'max', 'offset': 10}}
gcode:
    {% set session = printer['gcode_macro _UL_SESSION'] %}
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    # get safe positions
    {% set safe_min_x = printer.toolhead.axis_minimum.x %}
    {% set safe_min_y = printer.toolhead.axis_minimum.y %}
    {% set safe_max_x = printer.toolhead.axis_maximum.x %}
    {% set safe_max_y = printer.toolhead.axis_maximum.y %}

    # get base, default = print-area
    {% set min_x = session.print_min_x %}
    {% set min_y = session.print_min_y %}
    {% set max_x = session.print_max_x %}
    {% set max_y = session.print_max_y %}
    {% if config['base']|lower == 'build-plate' %}
        {% set min_x = printer.toolhead.axis_minimum.x %}
        {% set min_y = printer.toolhead.axis_minimum.y %}
        {% set max_x = printer.toolhead.axis_maximum.x %}
        {% set max_y = printer.toolhead.axis_maximum.y %}
    {% endif %}

    # get x parking position, default = centered 
    {% set park_x = max_x - (max_x - min_x) / 2 %}
    {% if config['x'].position == 'min' %}
        {% set park_x = min_x %}
    {% elif config['x'].position == 'max' %}
        {% set park_x = max_x %}
    {% endif %}

    # apply x offset if still safe
    {% if (park_x + config['x'].offset) <= safe_max_x %}
        {% set park_x = park_x + config['x'].offset %}
    {% endif %}

    # get y parking position, default = max 
    {% set park_y = max_y %}
    {% if config['y'].position == 'min' %}
        {% set park_y = min_y %}
    {% elif config['y'].position == 'center' %}
        {% set park_y = max_y - (max_y - min_y) / 2 %}
    {% endif %}

    # apply y offset if still safe
    {% if (park_y + config['y'].offset) <= safe_max_y %}
        {% set park_y = park_y + config['y'].offset %}
    {% endif %}

    # move print head
    G0 X{park_x} Y{park_y} F{parking.travel_speed|int * 60}


# -------------------------------------										
# Horizontal Movement
# -------------------------------------										
[gcode_macro _UL_HORIZONTAL_MOVEMENT]
variable_config: {
    'base': 'print-area',
    'x': { 'steps': 15, 'snyc_slider': False }, 
    'y': { 'position': 'max', 'offset': 10 }}
variable_x_step: 0                      ; only for internal use
variable_direction: 0                   ; only for internal use
gcode:
    {% set session = printer['gcode_macro _UL_SESSION'] %}
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    # reset
    {% if session.current_layer == 0 %}
        SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE=0
        SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=direction VALUE=0
    {% endif %}

    # get safe positions
    {% set safe_min_x = printer.toolhead.axis_minimum.x %}
    {% set safe_min_y = printer.toolhead.axis_minimum.y %}
    {% set safe_max_x = printer.toolhead.axis_maximum.x %}
    {% set safe_max_y = printer.toolhead.axis_maximum.y %}

    # get base, default = print-area
    {% set min_x = session.print_min_x %}
    {% set min_y = session.print_min_y %}
    {% set max_x = session.print_max_x %}
    {% set max_y = session.print_max_y %}
    {% if config['base']|lower == 'build-plate' %}
        {% set min_x = printer.toolhead.axis_minimum.x %}
        {% set min_y = printer.toolhead.axis_minimum.y %}
        {% set max_x = printer.toolhead.axis_maximum.x %}
        {% set max_y = printer.toolhead.axis_maximum.y %}
    {% endif %}

    # get x values
    {% set distance_x = max_x - min_x %}
    {% set step_x = distance_x / config['x'].steps %}

    # get x parking position
    {% if direction == 0 %}
        # left -> right
        {% set park_x = min_x + step_x * x_step %}
        SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE={x_step + 1}
        {% if x_step >= config['x'].steps %}
            SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE=0
            SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=direction VALUE=1
        {% endif %}
    {% else %}
        {% if direction == 1 %}
            # right -> left
            {% set park_x = max_x - step_x * x_step %}
            SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE={x_step + 1}
            {% if x_step >= config['x'].steps %}
                SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=x_step VALUE=0
                SET_GCODE_VARIABLE MACRO=_UL_HORIZONTAL_MOVEMENT VARIABLE=direction VALUE=0
            {% endif %}
        {% endif %}
    {% endif %}

    # get y parking position, default = max
    {% set park_y = max_y %}
    {% if config['y'].position == 'min' %}
        {% set park_y = min_y %}
    {% elif config['y'].position == 'center' %}
        {% set park_y = max_y - (max_y - min_y) / 2 %}
    {% endif %}

    # apply y offset if still safe
    {% if (park_y + config['y'].offset) <= safe_max_y %}
        {% set park_y = park_y + config['y'].offset %}
    {% endif %}

    # snyc slider
    {% if config['x'].snyc_slider == True %}
        {% set slider = printer['gcode_macro _UL_MOVE_SLIDER'] %}
        {% if slider.enabled == True %}
            {% set ul_slider = printer['gcode_macro _UL_SLIDER'] %}
            {% if ul_slider.exists == True %}
                _UL_SLIDER_MOVE MOVE={park_x}
            {% endif %}
        {% endif %}
    {% endif %}

    # move print head
    G0 X{park_x} Y{park_y} F{parking.travel_speed|int * 60}
    
    
# -------------------------------------										
# Follow Print Area Boundaries
# -------------------------------------										
[gcode_macro _UL_FOLLOW_PRINT_AREA_BOUNDARIES]
variable_config: {
    'base': 'print-area',
    'x': { 'steps': 15, 'offset': 0, 'snyc_slider': False }, 
    'y': { 'steps': 15, 'offset': 0 }}
variable_x_step: 0                      ; only for internal use
variable_y_step: 0                      ; only for internal use
variable_direction: 0                   ; only for internal use
gcode:
    {% set session = printer['gcode_macro _UL_SESSION'] %}
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    # reset
    {% if session.current_layer == 0 %}
        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE=0
        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE=0
        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=0
    {% endif %}

    # get safe positions
    {% set safe_min_x = printer.toolhead.axis_minimum.x %}
    {% set safe_min_y = printer.toolhead.axis_minimum.y %}
    {% set safe_max_x = printer.toolhead.axis_maximum.x %}
    {% set safe_max_y = printer.toolhead.axis_maximum.y %}

    # get base, default = print-area
    {% set min_x = session.print_min_x %}
    {% set min_y = session.print_min_y %}
    {% set max_x = session.print_max_x %}
    {% set max_y = session.print_max_y %}
    {% if config['base']|lower == 'build-plate' %}
        {% set min_x = printer.toolhead.axis_minimum.x %}
        {% set min_y = printer.toolhead.axis_minimum.y %}
        {% set max_x = printer.toolhead.axis_maximum.x %}
        {% set max_y = printer.toolhead.axis_maximum.y %}
    {% endif %}

    # get x values
    {% set distance_x = session.print_max_x - min_x %}
    {% set step_x = distance_x / config['x'].steps %}

    # get y values
    {% set distance_y = session.print_max_y - min_y %}
    {% set step_y = distance_y / config['x'].steps %}

    # get xy parking position
    {% if direction == 0 %}
        # left -> right
        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE={x_step + 1}
        {% set park_x = min_x + step_x * x_step %}
        {% set park_y = max_y %}
        {% if x_step >= config['x'].steps %}
            SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE=0
            SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=1
        {% endif %}
    {% else %}
        {% if direction == 1 %}
            # back -> front
            SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE={y_step + 1}
            {% set park_x = max_x %}
            {% set park_y = max_y - step_y * y_step %}
            {% if y_step >= config['y'].steps %}
                SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE=0
                SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=2
            {% endif %}
        {% else %}
            {% if direction == 2 %}
                # right -> left
                SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE={x_step + 1}
                {% set park_x = max_x - step_x * x_step %}
                {% set park_y = min_y %}
                {% if x_step >= config['x'].steps %}
                    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=x_step VALUE=0
                    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=3
                {% endif %}
            {% else %}
                {% if direction == 3 %}
                    # front -> back
                    SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE={y_step + 1}
                    {% set park_x = min_x %}
                    {% set park_y = min_y + step_y * y_step %}
                    {% if y_step >= config['y'].steps %}
                        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=y_step VALUE=0
                        SET_GCODE_VARIABLE MACRO=_UL_FOLLOW_PRINT_AREA_BOUNDARIES VARIABLE=direction VALUE=0
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}

    # apply x offset if still safe
    {% if (park_x + config['x'].offset) <= safe_max_x %}
        {% set park_x = park_x + config['x'].offset %}
    {% endif %}

    # apply y offset if still safe
    {% if (park_y + config['y'].offset) <= safe_max_y %}
        {% set park_y = park_y + config['y'].offset %}
    {% endif %}

    # snyc slider
    {% if config['x'].snyc_slider == True %}
        {% set slider = printer['gcode_macro _UL_MOVE_SLIDER'] %}
        {% if slider.enabled == True %}
            {% set ul_slider = printer['gcode_macro _UL_SLIDER'] %}
            {% if ul_slider.exists == True %}
                _UL_SLIDER_MOVE MOVE={park_x}
            {% endif %}
        {% endif %}
    {% endif %}

    # move print head
    G0 X{park_x} Y{park_y} F{parking.travel_speed|int * 60}


# -------------------------------------										
# Lift Print Head
# -------------------------------------										
[gcode_macro _UL_LIFT_PRINT_HEAD]
variable_lift_distance: 0.2
gcode:
    {% set parking = printer['gcode_macro _UL_PARKING'] %}

    {% set max_z = printer.toolhead.axis_maximum.z %}
    {% set park_z = lift_distance %}
    {% set act_z = printer.toolhead.position.z %}
    {% if (act_z|float + park_z|float) < max_z|float %}
        {% set park_z = (act_z|float + park_z|float) %}
    {% else %}
        {% set park_z = max_z %}
    {% endif %}

    G0 Z{park_z} F{parking.lift_speed|int * 60}
